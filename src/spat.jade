spat-nav
  div.spat-contents(name='contents')

  style(scoped, type='less').
    :scope {
      .spat-content {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        -webkit-overflow-scrolling: touch;
        backface-visibility: hidden;

        z-index: 5;
        animation-duration: 500ms;

        display: none;
        &.spat-active {
          display: block;
        }
      }
    }
    @keyframes slide-in {
      0% { transform: translate(250px, 0px); opacity: 0; }
      100% { transform: translate(0px, 0px); opacity: 1; }
    }
    @keyframes slide-out {
      0% { opacity: 1; }
      100% { opacity: 1; }
    }

    @keyframes scale-in {
      0% { transform: scale(0.5); opacity: 0; }
      0% { transform: scale(0.5); opacity: 0; }
      100% { transform: scale(1); opacity: 1; }
    }
    @keyframes scale-out {
      0% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.5); opacity: 0; }
      100% { transform: scale(1.5); opacity: 0; }
    }

    @keyframes rotate-in {
      0% { transform: perspective(800px) rotateY(180deg); opacity: 0; }
      100% { transform: perspective(800px) rotateY(0deg); opacity: 1; }
    }
    @keyframes rotate-out {
      0% { transform: perspective(800px) rotateY(0deg); opacity: 1; }
      100% { transform: perspective(800px) rotateY(-180deg); opacity: 0; }
    }
    
  script().
    var self = this;
    this.stack = [];
    this.animationMap = {
      item: {
        name: 'scale',
      },
    };

    this.on('mount', function() {
    });

    this.on('updated', function() {
      riot.route.start(true);
    });
    
    this.back = function() {
      self._back = true;
      history.back();
    };

    this.replace = function() {

    };

    var setAnimation = function(elm, name, duration, direction) {
      elm.style.animationDuration = duration || '';
      elm.style.animationDirection = direction || '';
      elm.style.animationName = name || '';
    };

    var onceEvent = function(elm, evtName, fn) {
      var temp = function() {
        elm.removeEventListener(evtName, temp, false);
        fn();
      };
      elm.addEventListener(evtName, temp, false);
    };

    this._swap = function(next, prev, back, done) {
      //- var animation = (back !== true) ? this.animationMap[next.localName] : this.animationMap[prev.localName];
      var animation = (back !== true) ? next._tag.animation : prev._tag.animation;

      if (!animation) {
        done();
        return ;
      }

      var time = animation.time || 500;

      if (!back) {
        setAnimation(next, animation.name + '-in', time);
      }
      else {
        setAnimation(next, animation.name + '-out', time, 'reverse');
      }

      onceEvent(next, 'animationend', function() {
        setAnimation(next);
      });

      if (prev) {
        if (!back) {
          setAnimation(prev, animation.name + '-out', time);
        }
        else {
          setAnimation(prev, animation.name + '-in', time, 'reverse');
        }

        onceEvent(prev, 'animationend', function() {
          setAnimation(prev);
          done();
        });
      }
    };

    riot.route(function(tagName) {
      if (tagName === '') tagName = 'home';

      var prev = self.contents.querySelector('.spat-active');

      if (prev && prev.getAttribute('riot-tag') === tagName) {
        prev._tag.trigger('active');
        return ;
      }

      var content = self.root.getElementsByTagName(tagName)[0];
      if (!content) {
        content = document.createElement(tagName);
        content.classList.add('spat-content');
        self.contents.appendChild(content);
        riot.mount(tagName, tagName, {
          app: self,
        });
      }
      else {
        if (!self._back) {
          // 最前面に移動
          var parent = content.parentNode;
          parent.removeChild(content);
          parent.appendChild(content);
        }
      }
      
      content.classList.add('spat-active');
      
      content._tag.trigger('active', {
        prevTag: prev ? prev._tag : null,
        opts: riot.spat.opts,
        hashes: location.hash.split('?')[0].split('/'),
        query: riot.route.query(),
        back: self._back,
      });

      self._swap(content, prev, self._back, function() {
        if (prev) {
          prev.classList.remove('spat-active');
        }
      });

      self.trigger('swap', {
        next: content,
        prev: prev,
        back: self._back,
      });
      
      self._back = false;
      
      // cache prev
      self.prev = prev;
      self.stack.push(prev);
    });


    // util
    riot.spat = {
      goto: function(e, opts) {
        var path = '';
        if (typeof e === 'string') {
          path = e;
        }
        else {
          path = e.currentTarget.getAttribute('href');
        }
        riot.spat.opts = opts;
        riot.route(path);
        delete riot.spat.opts;
      },
      back: function() {
        self._back = true;
        history.back();
      },
    };

